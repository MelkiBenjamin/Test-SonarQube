name: configuration et deploie aplication sur aks
on:
    push:
    workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: demarer minikube
      run: minikube start --driver=docker

    - name: creer namespace argocd
      run: kubectl create namespace argocd

    - name: installe argocd
      run: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: redirection de port
      run: |
        echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
        kubectl patch svc argocd-server -n argocd --type merge --patch "$(cat patch.json)"

    - name: sleep 90s
      run: sleep 90s

    - name: decrie svc argocd-server
      run: kubectl describe svc -n argocd argocd-server

    - name: affiche pod
      run: kubectl get pods -n argocd

    - name: affiche svc
      run: kubectl get svc -n argocd

    - name: install cli argocd
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: minikube service argocd-server -n argocd
      run: minikube service argocd-server -n argocd

    - name: affiche 1
      run: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo

    - name: affiche3
      run: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

    - name: affiche 2
      run: minikube service -n argocd argocd-server | grep -o -m 1 "http://.*" | sed "s/.$//"

    - name: affiche svc
      run: kubectl get svc -n argocd

    - name: conexion argocd
#      env:
#        ip: "minikube service -n argocd argocd-server | grep -o -m 1 'http://.*'| head -4 | tail -1"
#        mdp: 'kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo'
      run: argocd login minikube service -n argocd argocd-server | grep -o -m 1 "http://.*" | sed "s/.$//" --username admin --password kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo --insecure


#    - name: affiche le mot de passe1
#      run: cat test.txt

#    - name: affiche le mot de passe2
#      run: cat test2.txt
    
#    - name: Se connecter Ã  Argo CD
#      run: |
#        argocd login localhost:8080 --insecure --username admin --password admin

#    - name: argocd new mdp
#      run: argocd account update-password --current-password Z9Zx9cqZw3BfSQ4N --new-password admin
      
    - name: creer application et synchronize automatique a github
      run: |
        kubectl config set-context --current --namespace=argocd
        argocd login --core
        argocd app create ecommerce --repo https://github.com/MelkiBenjamin/deploiement-apli-kubernetes-argocd --path ecommerce --dest-server https://kubernetes.default.svc --dest-namespace default --sync-policy automated --auto-prune
        sleep 120s  
        
    - name: minikube service
      run: kubectl get svc

    - name: affiche pod
      run: kubectl get pods
      
    - name: affiche l'url du service
      run: |
        kubectl get service
        minikube service evershop --url

  monitoring:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: demarer minikube
        run: minikube start --driver=docker

      - name: install helm
        uses: Azure/setup-helm@v4
        id: install-helm

      - name: install helm apli monitoring
        run: |
          kubectl create namespace monitoring
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --version 57.0.3 -n monitoring

  Analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        #uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory 
            -Dsonar.projectKey=MelkiBenjamin_test-sonarqube
            -Dsonar.organization=melkibenjamin
            -Dsonar.sources=. 
            -Dsonar.qualitygate.wait=true
            #-Dsonar.verbose=true 
            # Comma-separated paths to directories containing main source files.
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .
